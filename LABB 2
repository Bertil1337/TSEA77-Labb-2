;sätter stackpekaren
	ldi     r16,HIGH(RAMEND)
	out     SPH,r16
	ldi     r16,LOW(RAMEND)
	out     SPL,r16
	;konf B som utgång
	ldi		r16,$FF
	out		DDRB, r16

	.equ	SPEED = 370 ;pitch
	.equ	N = 20 ;höja för långsammare

START:
	ldi		ZL,LOW(MESSAGE*2)
	ldi		ZH,HIGH(MESSAGE*2)

MORSE:
	lpm		r17,Z+
	cpi		r17,$00 ;$00 är sista tecknet i MESSAGE
	breq	DONE ;Z=1, vi är klara
	cpi		r17,$20
	breq	SPACE
	rcall	LOOKUP ;översätt ASCII till binärkod och lägger i register

CHECK_BITS: ;flyttar till vänster, kollar C och Z, när 0b1000000 är vi klara
	cpi		r17,$80
	breq	BETWEEN_CHARS;då r16 är $80 är vi klara
	lsl		r17
	brcc	DIT	;c=0 
;varje 0 och 1 ger DIT eller DAH, DAH=3N, DIT=N, NOBEEP efter varje DAH/DIT
DAH: ;1, 3*N
	ldi	r18,N*2
	rcall	BEEP
DIT: ;0, N
	ldi	r18,N
	rcall	BEEP
	rcall	NOBEEP ;efter?
	rjmp	CHECK_BITS

BETWEEN_CHARS:
	ldi	r18,N*2
	rcall	NOBEEP
	rjmp	MORSE
	
BEEP:
	mov	r16,r18
BEEP_LOOP:
	sbi		PORTB,0
	rcall	DELAY
	cbi		PORTB,0
	rcall	DELAY
	dec		r16
	brne	BEEP_LOOP
	ret

NOBEEP: ;tyst
	mov		r16,r18
NOBEEP_LOOP:
	cbi		PORTB,0
	rcall	DELAY
	rcall	DELAY
	dec		r16
	brne	NOBEEP_LOOP
	ret

LOOKUP:
	push	ZH
	push	ZL
	ldi		ZH, HIGH(BTAB*2)
	ldi		ZL, LOW(BTAB*2)
	subi	r17,$41
	add		ZL, r17
	lpm		r17,Z ;laddar in rätt bokstav i binärkod
	pop		ZL
	pop		ZH
	ret

SPACE:
	ldi		r16,N*5
	rcall	NOBEEP
	rjmp	MORSE

DONE:
	ldi		r16,N*5
	rcall	NOBEEP
	;rjmp	DONE
	rjmp	START

DELAY:
	ldi		r25,HIGH(SPEED)
	ldi		r24,LOW(SPEED)
DELAY_LOOP: 
	sbiw	r24,1
	brne	DELAY_LOOP
	ret

MESSAGE:
.db		"Z",$00

BTAB:
.db     $60,$88,$A8,$90,$40,$28,$D0,$08,$20,$78,$B0,$48,$E0,$A0,$F0,$68,$D8,$50,$10,$C0,$30,$18,$70,$98,$B8,$C8
